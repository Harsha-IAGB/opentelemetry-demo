name: CI/CD Pipeline

on:
  push:
    branches: [main]

env:
  AWS_REGION: us-east-2
  AWS_CLUSTER: 818n-g21-eks
  K8S_NAMESPACE: 818n-g21-ns
  ECR_URI: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-2.amazonaws.com

jobs:
  build:
    name: Build & Push Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build & push all service images explicitly
        run: |
          # Loop through src directory and build each Dockerfile
          for dir in src/*; do
            if [ -f "$dir/Dockerfile" ]; then
              svc=$(basename "$dir")
              echo "Building and pushing image for service: $svc"
              docker build -t "$ECR_URI/$svc:latest" -f "$dir/Dockerfile" .
              docker push    "$ECR_URI/$svc:latest"
            fi
          done

  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig for EKS
        run: aws eks update-kubeconfig --name ${{ env.AWS_CLUSTER }} --region ${{ env.AWS_REGION }}

      - name: Patch core manifest image references
        run: |
          BUILD_MANIFEST="kubernetes/818n-g21-build.yml"
          # Update images to point at ECR
          for dir in src/*; do
            if [ -f "$dir/Dockerfile" ]; then
              svc=$(basename "$dir")
              sed -i "s|image: .*${svc}.*|image: ${ECR_URI}/${svc}:latest|g" "$BUILD_MANIFEST"
            fi
          done

      - name: Apply Grafana manifest
        run: |
          kubectl create -n ${{ env.K8S_NAMESPACE }} -f kubernetes/818n-g21-grafana-build.yml

      - name: Apply core Kubernetes manifest
        run: |
          kubectl apply -n ${{ env.K8S_NAMESPACE }} -f kubernetes/818n-g21-build.yml

  rollback:
    name: Rollback on Failure
    needs: [build, deploy]
    if: ${{ failure() }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ env.AWS_CLUSTER }} --region ${{ env.AWS_REGION }}

      - name: Roll back Deployments
        run: |
          for d in $(kubectl get deployments -n ${{ env.K8S_NAMESPACE }} -o name); do
            echo "Attempting rollback for $d"
            # try rollback; if no history, skip
            kubectl rollout undo $d -n ${{ env.K8S_NAMESPACE }} || echo "  ↳ no rollout history for $d, skipping"
          done

      - name: Roll back StatefulSets
        run: |
          for s in $(kubectl get statefulsets -n ${{ env.K8S_NAMESPACE }} -o name); do
            echo "Attempting rollback for $s"
            kubectl rollout undo $s -n ${{ env.K8S_NAMESPACE }} || echo "  ↳ no rollout history for $s, skipping"
          done

