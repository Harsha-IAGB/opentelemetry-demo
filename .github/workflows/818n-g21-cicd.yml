# File: .github/workflows/simple-ci-cd.yml
name: Simple CI/CD Pipeline

# Trigger on push to main branch
on:
  push:
    branches: [main]

env:
  AWS_REGION: us-east-2
  AWS_CLUSTER: 818n-g21-eks
  K8S_NAMESPACE: 818n-g21-ns
  SERVICES: "frontend frontendproxy cartservice checkoutservice currencyservice emailservice adservice accountingservice imageprovider loadgenerator paymentservice productcatalogservice quoteservice recommendationservice shippingservice frauddetectorservice valkey collector jaeger prometheus grafana kafka"
  ECR_URI: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-2.amazonaws.com

jobs:
  # 1) Build and Push Docker Images
  build:
    name: Build & Push Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build all services with Docker Compose
        run: docker compose -f docker-compose.yml build

      - name: Tag and push images to ECR
        run: |
          for svc in $SERVICES; do
            echo "Processing service: $svc"
            IMAGE_ID=$(docker compose -f docker-compose.yml images -q $svc)
            if [ -z "$IMAGE_ID" ]; then
              echo "No image found for $svc, skipping"
              continue
            fi
            docker tag "$IMAGE_ID" "$ECR_URI/$svc:latest"
            docker push "$ECR_URI/$svc:latest"
          done

    # 2) Deploy to EKS using kubectl apply on provided manifests
  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig for EKS
        run: aws eks update-kubeconfig --name ${{ env.AWS_CLUSTER }} --region ${{ env.AWS_REGION }}

      - name: Patch namespace and image references in build manifest
        run: |
          BUILD_MANIFEST="kubernetes/818n-g21-build.yml"
          # Update images to point at ECR
          for svc in $SERVICES; do
            sed -i "s|image: .*${svc}.*|image: ${ECR_URI}/${svc}:latest|g" "$BUILD_MANIFEST"
          done

      - name: Apply Grafana manifest
        run: |
          kubectl delete namespace ${{ env.K8S_NAMESPACE }} && kubectl wait --for=delete ns/818n-g21-ns --timeout=60s && kubectl create -n ${{ env.K8S_NAMESPACE }} -f kubernetes/818n-g21-grafana-build.yml

      - name: Apply core Kubernetes manifest
        run: |
          kubectl apply -n ${{ env.K8S_NAMESPACE }} -f kubernetes/818n-g21-build.yml
