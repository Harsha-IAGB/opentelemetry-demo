# File: .github/workflows/simple-ci-cd.yml
name: Simple CI/CD Pipeline

# Trigger on push to main branch
on:
  push:
    branches: [main]

# Global variables
env:
  AWS_REGION: us-east-2
  AWS_CLUSTER: 818n-g21-eks
  K8S_NAMESPACE: 818n-g21-ns
  SERVICES: "frontend cart checkout email recommendation shipping"
  ECR_URI: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

jobs:
  # 1) Build and Push Docker Images
  build:
    name: Build & Push Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build all services with Docker Compose
        run: docker compose -f docker-compose.yml build

      - name: Tag and push images to ECR
        run: |
          # Iterate over SERVICES environment variable
          for svc in $SERVICES; do
            docker tag $svc:latest $ECR_URI/$svc:latest
            docker push $ECR_URI/$svc:latest
          done

  # 2) Run Integration Smoke Tests
  test:
    name: Integration Smoke Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run tests via Docker Compose
        run: |
          docker compose -f docker-compose-tests.yml up \
            --abort-on-container-exit \
            --exit-code-from loadgenerator

  # 3) Deploy to EKS via Helm
  deploy:
    name: Deploy to EKS with Helm
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ env.AWS_CLUSTER }} --region ${{ env.AWS_REGION }}

      - name: Install Helm
        run: curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Add & update OpenTelemetry Helm repo
        run: |
          helm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts
          helm repo update

      - name: Create namespace (if not exists)
        run: kubectl create namespace ${{ env.K8S_NAMESPACE }} || true

      - name: Deploy application with Helm
        run: |
          # Dynamically build override flags for ECR images
          SET_FLAGS=""
          for svc in $SERVICES; do
            SET_FLAGS+=" --set $svc.image.repository=$ECR_URI/$svc"
            SET_FLAGS+=" --set $svc.image.tag=latest"
          done
          helm upgrade --install otel-demo open-telemetry/opentelemetry-demo \
            --namespace ${{ env.K8S_NAMESPACE }} $SET_FLAGS

      - name: Verify deployment
        run: kubectl get all -n ${{ env.K8S_NAMESPACE }}
