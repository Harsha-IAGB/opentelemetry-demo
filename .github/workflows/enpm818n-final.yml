# File: .github/workflows/ci-cd.yml
name: CI/CD Pipeline with Helm

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-2
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-2.amazonaws.com
  EKS_CLUSTER: 818n-g21-eks
  K8S_NAMESPACE: 818n-g21-ns

jobs:
  # Step 1: Build & Push Docker Images for all services
  build-and-push-images:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Prepare ECR repositories and login
        run: |
          for dir in src/*; do
            if [ -f "$dir/Dockerfile" ]; then
              svc=$(basename "$dir")
              aws ecr describe-repositories --repository-names "$svc" || \
                aws ecr create-repository --repository-name "$svc" --region $AWS_REGION
            fi
          done
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: Build & push each service image
        run: |
          for dir in src/*; do
            if [ -f "$dir/Dockerfile" ]; then
              svc=$(basename "$dir")
              # Detect if Dockerfile needs Java agent build arg
              build_args=""
              if grep -q "OTEL_JAVA_AGENT_VERSION" "$dir/Dockerfile"; then
                build_args="--build-arg OTEL_JAVA_AGENT_VERSION=1.39.1"
              fi
              docker build $build_args -t "$ECR_REGISTRY/$svc:latest" -f "$dir/Dockerfile" .
              docker push    "$ECR_REGISTRY/$svc:latest"
            fi
          done

  # Step 2: Deploy with Helm
  deploy-with-helm:
    name: Deploy with Helm
    needs: build-and-push-images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig for EKS
        run: aws eks update-kubeconfig --name $EKS_CLUSTER --region $AWS_REGION

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Check Helm version
        run: helm version

      - name: Add & update Helm repo
        run: |
          helm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts
          helm repo update

      - name: Ensure namespace exists
        run: kubectl create namespace $K8S_NAMESPACE || true

      - name: Helm upgrade/install demo
        run: |
          helm upgrade --install otel-demo open-telemetry/opentelemetry-demo \
            --namespace $K8S_NAMESPACE \
            $(for dir in src/*; do \
                if [ -f "$dir/Dockerfile" ]; then \
                  svc=$(basename "$dir"); \
                  echo "--set $svc.image.repository=$ECR_REGISTRY/$svc --set $svc.image.tag=latest"; \
                fi; \
              done)

      - name: Verify Kubernetes resources
        run: kubectl get all -n $K8S_NAMESPACE

  # Step 3: Rollback on Failure
  rollback:
    name: Rollback on Failure
    if: ${{ failure() }}
    needs: [build-and-push-images, deploy-with-helm]
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig for EKS
        run: aws eks update-kubeconfig --name $EKS_CLUSTER --region $AWS_REGION

      - name: Helm rollback to previous release
        run: helm rollback otel-demo 1 -n $K8S_NAMESPACE
