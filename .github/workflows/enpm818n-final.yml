# File: .github/workflows/simple-ci-cd.yml
name: Simple CI/CD Pipeline

# Trigger on push to main branch
on:
  push:
    branches: [main]

# Global variables
env:
  AWS_REGION: us-east-2
  AWS_CLUSTER: 818n-g21-eks
  K8S_NAMESPACE: 818n-g21-ns
  SERVICES: "frontend frontendproxy cartservice checkoutservice currencyservice emailservice adservice accountingservice imageprovider loadgenerator paymentservice productcatalogservice quoteservice recommendationservice shippingservice frauddetectorservice valkey collector jaeger prometheus grafana kafka"
  ECR_URI: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-2.amazonaws.com

jobs:
#   # 1) Build and Push Docker Images
#   build:
#     name: Build & Push Images
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Login to Amazon ECR
#         uses: aws-actions/amazon-ecr-login@v1

#       - name: Build all services with Docker Compose
#         run: docker compose -f docker-compose.yml build

#       - name: Tag and push images to ECR
#         run: |
#           # Use docker compose to get built image IDs and push to ECR
#           for svc in $SERVICES; do
#             echo "Processing service: $svc"
#             IMAGE_ID=$(docker compose -f docker-compose.yml images -q $svc)
#             if [ -z "$IMAGE_ID" ]; then
#               echo "No image found for $svc, skipping"
#               continue
#             fi
#             docker tag "$IMAGE_ID" "$ECR_URI/$svc:latest"
#             docker push "$ECR_URI/$svc:latest"
#           done

#   # 2) Run Integration Smoke Tests
#   test:
#     name: Integration Smoke Tests
#     runs-on: ubuntu-latest
#     needs: build
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Run tests via Docker Compose
#         run: |
#           docker compose -f docker-compose-tests.yml up \
#             --abort-on-container-exit \
#             --exit-code-from loadgenerator

  # 3) Deploy to EKS via Helm
  deploy:
    name: Deploy to EKS with Helm
    runs-on: ubuntu-latest
    # needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ env.AWS_CLUSTER }} --region ${{ env.AWS_REGION }}

      - name: Install Helm
        run: curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Add & update OpenTelemetry Helm repo
        run: |
          helm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts
          helm repo update

      - name: Create namespace (if not exists)
        run: kubectl create namespace ${{ env.K8S_NAMESPACE }} || true

      - name: Deploy application with Helm
        run: |
          echo "Generating override-values.yaml"
          cat > override-values.yaml <<EOF
            components:
            EOF
                    for svc in $SERVICES; do
                        cat >> override-values.yaml <<EOF
            ${svc}:
                image:
                repository: ${ECR_URI}/${svc}
                tag: latest
            EOF
                    done
                    echo "Override file contents:"
                    cat override-values.yaml

          # Deploy or upgrade the Helm release using the override file
          helm upgrade --install otel-demo open-telemetry/opentelemetry-demo \
            --namespace ${{ env.K8S_NAMESPACE }} \
            -f override-values.yaml

      - name: Verify deployment
        run: kubectl get all -n ${{ env.K8S_NAMESPACE }}
